version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0


jobs:
    lint-code:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install Required Dependencies
            command: |
              sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
              sudo chmod +x /bin/hadolint
        - run:
            name: Execute Lint on Docker File
            command: |
              hadolint Dockerfile
              
    build-push-docker:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.14
        - run:
            name: Build & Push Docker Image in DockerHub
            command: |
              echo "Building Docker Image..."
              docker build --tag $IMAGE_TAG .
              docker image ls
              echo "Uploading Image to Dockerhub..."
              docker login -u="$DOCKERHUB_USER" -p="$DOCKERHUB_PASS"
              docker tag $IMAGE_TAG $DOCKERHUB_USER/$IMAGE_TAG:$CIRCLE_WORKFLOW_ID
              docker push $DOCKERHUB_USER/$IMAGE_TAG:$CIRCLE_WORKFLOW_ID
              
    deploy-eks-cluster:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "us-east-1a"          
      steps:
        - checkout
        - run:
            name: Download & Install eksctl cli
            command: |
              if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
              fi

              mkdir -p utilities
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C utilities
              ls -lrt
              chmod +x utilities/eksctl 
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv utilities/eksctl /usr/local/bin/
              rmdir utilities
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - aws-eks/create-cluster:
            cluster-name: << parameters.cluster-name >>
            skip-kubectl-install: false
            verbose: 3
            node-type: t2.small
            nodes-max: 2
            ssh-access: false
            ssh-public-key: 'udacity'   
              
              
    deploy-app:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "us-east-1a"
      steps:
        - checkout
        - run:
            name: Create Secret and store in variable
            command: |
              export DOCKER_SECRET= $(kubectl create secret docker-registry myregistrykey --docker-server=https://hub.docker.com --docker-username=$DOCKERHUB_USER --docker-password=$DOCKERHUB_PASS --docker-email=amit.khurana@gmail.com)

        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
            aws-region: << parameters.aws-region >>
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            watch-rollout-status: true
            resource-file-path: "eks/eks_app_deployment.yaml"
            resource-name: deployment/uccapstoneproject
        - kubernetes/create-or-update-resource:
            resource-file-path: "eks/eks_cluster_service.yaml"
            resource-name: Service/uccapstoneproject

    test-app:
        executor: aws-eks/python3
        parameters:
          cluster-name:
            description: |
              Name of the EKS cluster
            type: string
          aws-region:
            description: |
              AWS region
            type: string
            default: ""
        steps:
          - aws-eks/update-kubeconfig-with-authenticator:
              cluster-name: << parameters.cluster-name >>
              install-kubectl: true
              aws-region: << parameters.aws-region >>
          - run:
              name: Wait for service to be ready
              command: |
                kubectl get pods
                kubectl get services
                kubectl describe pods
                   
workflows:
  default:
    jobs:
      - lint-code
      - build-push-docker:
          requires:
            - "lint-code"
      - deploy-eks-cluster:
          cluster-name: uccapstoneproject-cluster-deployment-v1
          requires:
            - "build-push-docker"
      - deploy-app:
          cluster-name: uccapstoneproject-cluster-deployment-v1
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - deploy-eks-cluster
      - aws-eks/update-container-image:
          cluster-name: uccapstoneproject-cluster-deployment-v1
          container-image-updates: 'uccapstoneproject=$IMAGE_TAG:9e951cfd-65c6-4d45-abac-e2277a9ff3a5'
          record: true
          requires:
            - deploy-app
          resource-name: deployment/uccapstoneproject     
      - test-app:
          cluster-name: uccapstoneproject-cluster-deployment-v1
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - aws-eks/update-container-image
